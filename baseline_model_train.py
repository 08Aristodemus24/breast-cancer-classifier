# -*- coding: utf-8 -*-
"""breast_cancer_train_nn.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k3aEvjzTYjE2yFrKdLVilldB0PxRvx30

# Breast Cancer Wisconsin Binary Classifier
## Import libraries
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import OrdinalEncoder

import tensorflow as tf
from tensorflow.nn import sigmoid
from tensorflow.keras.regularizers import L2
from tensorflow.keras.layers import Dense
from tensorflow.keras import Model, Input, Sequential
from tensorflow.keras.optimizers import Adam
from tensorflow.keras.losses import BinaryCrossentropy as bce_loss
from tensorflow.keras.metrics import BinaryAccuracy, BinaryCrossentropy as bce_metric

"""### check current working directory"""

import os
print(os.getcwd())

"""## loading the data"""

def view_data_info(df):
    Y = df['diagnosis']
    X = df.loc[:, df.columns != 'diagnosis']

    print(df.head())
    print(df.shape)
    print(df.columns[0:32])
    print(df.loc[:, df.columns != 'Unnamed: 32'])

    print(X.head())
    print(Y.head())
    print(X.shape)
    print(Y.shape)
    
def view_train_cross(X_trains, X_cross, Y_trains, Y_cross):
    print(X_trains.shape)
    print(Y_trains.shape)
    print(X_cross.shape)
    print(Y_cross.shape)
    print(X_trains)
    print(Y_trains)
    print(X_trains.dtypes)

# use path below if in local machine
df = pd.read_csv('./data.csv')

# use path below if in google collab
# df = pd.read_csv('./sample_data/breast_cancer_data.csv')

# delete id diagnosis
Y = df['diagnosis']

# transform Y to 2-dim 1 x m matrix
Y = Y.to_numpy().reshape(Y.shape[0], -1)

X = df.drop(['id', 'Unnamed: 32', 'diagnosis'], axis=1, inplace=False)
view_data_info(df)

"""# preprocess data
- normalize
- encode to numerical values Y column
"""

# note that 1 is now the malignant class 
# and 0 is the benign class/category
oe = OrdinalEncoder()
Y = oe.fit_transform(Y)
Y

X_trains, X_, Y_trains, Y_ = train_test_split(X, Y, test_size=0.3, random_state=0)
X_cross, X_tests, Y_cross, Y_tests = train_test_split(X_, Y_, test_size=0.5, random_state=0)

view_train_cross(X_trains, X_cross, Y_trains, Y_cross)

"""## define model architecture"""

model = Sequential([
    Dense(units=10, activation='relu', ),
    Dense(units=10, activation='relu', ),
    Dense(units=10, activation='relu', ),
    Dense(units=10, activation='relu', ),
    Dense(units=1, activation='linear'),
])

model.compile(
    loss=bce_loss(from_logits=True),
    optimizer=Adam(learning_rate=0.0075),
    metrics=[bce_metric(), BinaryAccuracy(threshold=0.5)]
)

"""## tuning techniques to use for improved learning
- learning rate
- num epochs
- batch size
- nodes per hidden layer
- num layers
- normalization
- lambda
- optimizer
- hyper parameters of optimizer
- feature selection
- dropout

## begin model training
"""

history = model.fit(
    X_trains, Y_trains,
    epochs=100,
    validation_data=(X_cross, Y_cross)
)

"""## plot the history of accuracy and cost of model"""

results = {
    'train_loss': history.history['loss'],
    'train_binary_crossentropy': history.history['binary_crossentropy'],
    'train_binary_accuracy': history.history['binary_accuracy'],
    'cross_val_loss': history.history['val_loss'],
    'cross_val_binary_crossentropy': history.history['val_binary_crossentropy'],
    'cross_val_binary_accuracy': history.history['val_binary_accuracy']
}

figure = plt.figure(figsize=(15, 10))
axis = figure.add_subplot()

styles = [('p:', '#5d42f5'), ('h-', '#fc03a5'), ('o:', '#1e8beb'), ('x--','#1eeb8f'), ('+--', '#0eb802'), ('8-', '#f55600')]

for index, (key, value) in enumerate(results.items()):
  axis.plot(np.array(history.epoch) + 1, value, styles[index][0] ,color=styles[index][1], alpha=0.5, label=key)

axis.set_ylabel('metric value')
axis.set_xlabel('epochs')
axis.legend()
plt.savefig('breast cancer classifier train and dev results.png')
plt.show()

# save baseline model
model.save('./models/baseline_model.h5')